// Sample Avatar Event Handler
$module

$import $avEventGen (); // module contains the mk... functions for generating events...
// i.e.
// string mkTouch(string primKey, float duration) Create an event string representing the avatar touching a particular prim for a duration (in seconds). 
// string mkFaceTouch(string primKey, float duration, integer face, float s, float t) 
//     Create an event string representing the avatar touching a particular prim on a particular face at a particular place for a duration (in seconds)
// string mkWhisper(integer channel, string message) 
//     Create an event string representing the avatar whispering on a particular channel. 
// string mkSay(integer channel, string message) 
//     Create an event string representing the avatar speaking on a particular channel. 
// string mkShout(integer channel, string message) 
//      Create an event string representing the avatar shouting on a particular channel. 
// string mkPay(string primKey, integer amount) 
//     Create an event string representing the avatar paying an amount to a particular prim. 
// string mkControl(integer newControlBits) 
//     Create an event string representing the avatar/agent's control bits changing. 
// string mkHTTPRequest(string url, string method, string body, string ip, string userAgent) 
//     Create an event string representing an http request to a particular URL, using a particular method (e.g. GET/POST/PUT/etc.), with
//     a particular body, from a particular IP address, using a particular user agent

// Leave this one in your event handler (and edit it) to react to llOwnerSay messages
list onOwnerSay(string primKey, string message, list avInfo) {
   return []; // e.g. return [mkTouch(primKey,2.0),mkPay(primKey,50)];
}

// Leave this one in your event handler (and edit it) to react to llSay/llWhisper/llShout messages 
// on channel 0.
list onChat(string name, string primKey, string message, list avInfo) {
    return [];
} 

// Leave this one in your event handler (and edit it) to react to llLoadURL events.
list onLoadURL(string message, string url, list avInfo) {
    return [];
} 

// Leave this one in your event handler (and edit it) to react to llDialog events
list onDialog(string message, list buttons, integer chan, string source, list avInfo) {
    return [];
}

// Leave this one in your event handler (and edit it) to react to llMapDestination events
list onMapDestination(string simName, vector position, list avInfo) {
    return [];
}

// Leave this one in your event handler (and edit it) to react to llHTTPResponse events
// (only ones generated in response to http requests initiated by the avatar the
// a handler is attached to, however)
list onHTTPResponse(string responseKey, integer httpStatus, string body, list avInfo) {
    return [];
}

// Leave this one in your event handler to receive a unique key for each http request
// made by the avatar (the next event after the request is made will be either an http
// request key event, or a bad request event, below) in case there is any ambiguity (i.e.
// your avatar event handler might make several different http requests that could be
// outstanding at the same time).
list onHTTPRequestKey(string responseKey, list avInfo) {
    return [];
}

// Leave this one in your event handler to receive an indication that the last http request
// made by the handler was 'bad'.
list onHTTPBadRequest(list avInfo) {
    return [];
}