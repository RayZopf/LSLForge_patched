66a67
> import qualified Data.Set as DS
291c292
<         vsNamesUsed :: [String],
---
>         vsNamesUsed :: !(DS.Set String),
301c302
<     
---
> 
315c316
<     vsNamesUsed = [], 
---
>     vsNamesUsed = DS.fromList (map (\ (name, t, ts) -> name) funcSigs), 
398c399
< vsmAddToNamesUsed name = get'vsNamesUsed >>= put'vsNamesUsed . (name :)
---
> vsmAddToNamesUsed name = get'vsNamesUsed >>= put'vsNamesUsed . (DS.insert name)
538c539
<     when (varName v' `elem` namesUsed) (vsmAddErr (srcCtx v, varName v' ++ " is already defined"))
---
>     when (varName v' `DS.member` namesUsed) (vsmAddErr (srcCtx v, varName v' ++ " is already defined"))
550c551
<             whenM ((return elem) `ap` (return $ ctxItem name) `ap` get'vsNamesUsed) (vsmAddErr (srcCtx name, ctxItem name ++ " is already defined"))
---
>             whenM ((return DS.member) `ap` (return $ ctxItem name) `ap` get'vsNamesUsed) (vsmAddErr (srcCtx name, ctxItem name ++ " is already defined"))
579c580
<             if name' `elem` namesUsed 
---
>             if name' `DS.member` namesUsed 
581c582
<                 else let rewrittenFunc = (Func (FuncDec (Ctx (srcCtx name) name') t params) $ rewriteStatements 0 renames statements)
---
>                 else let rewrittenFunc = (Func (FuncDec (Ctx (srcCtx name) name') t params) $ rewriteStatements 0 (removeLocals params renames) statements)
590c591
<             if name' `elem` namesUsed
---
>             if name' `DS.member` namesUsed
615a617,620
> removeLocals :: [CtxVar] -> [(String, String)] -> [(String, String)]
> removeLocals locals globals =
>     filter (\ (gName, _) -> (all (\ (Ctx _ (Var localName _)) -> localName /= gName)) locals) globals
> 
696c701
<     vsmInBranch $ compileStatement statement
---
>     compileBranchStatement statement
700c705
<     vsmInBranch $ compileStatement statement
---
>     compileBranchStatement statement
706c711
<     vsmInBranch $ compileStatement statement
---
>     compileBranchStatement statement
710,711c715,716
<     ret1 <- vsmInBranch $ compileStatement thenStmt
<     ret2 <- vsmInBranch $ compileStatement elseStmt
---
>     ret1 <- compileBranchStatement thenStmt
>     ret2 <- compileBranchStatement elseStmt
746a752,758
> compileBranchStatement :: CtxStmt -> VState Bool
> compileBranchStatement ctxStmt@(Ctx _ (Decl _ _)) = do
>     vsmAddErr (srcCtx ctxStmt, "Declaration requires a new scope  - -  use { and }")
>     return False
> --    get'vsBranchReturns
> compileBranchStatement ctxStmt = vsmInBranch $ compileStatement ctxStmt
> 
